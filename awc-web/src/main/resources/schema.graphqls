# ------------------------------------------------ ENUMS ---------------------------------------------- #
enum MessageType {
    PRINT_MOVE
    ROLL_STAT_MOVE
    ROLL_HX_MOVE
    BARTER_MOVE
    ROLL_BARTER_MOVE
    SUFFER_HARM_MOVE
    ADJUST_HX_MOVE
    ROLL_STOCK_MOVE
    STOCK_MOVE
    SUFFER_V_HARM_MOVE
    SCRIPT_CHANGE
}

enum RoleType {
    MC
    PLAYER
}

enum StatType {
    COOL
    HARD
    HOT
    SHARP
    WEIRD
    HX
}

enum MoveType {
    CHARACTER
    DEFAULT_CHARACTER
    BASIC
    PERIPHERAL
    BATTLE
    ROAD_WAR
    UNIQUE
    IMPROVE_STAT
    ADD_CHARACTER_MOVE
    ADJUST_UNIQUE
    ADD_OTHER_PB_MOVE
    ADD_UNIQUE
    ADD_VEHICLE
    GENERIC_INCREASE_STAT
    RETIRE
    ADD_SECOND_CHARACTER
    CHANGE_PLAYBOOK
    IMPROVE_BASIC_MOVES
    DEATH
}

enum MoveActionType {
    ROLL,
    PRINT,
    BARTER,
    ADJUST_HX,
    STOCK,
    GUNLUGGER_SPECIAL,
    HOCUS_SPECIAL,
    SKINNER_SPECIAL
}

enum RollType {
    STAT,
    HX,
    HARM,
    BARTER,
    SPEED,
    HANDLING,
    STOCK,
    FORTUNE,
    CHOICE,
    V_HARM
}

enum PlaybookType {
    ANGEL
    BATTLEBABE
    BRAINER
    CHOPPER
    DRIVER
    GUNLUGGER
    HARDHOLDER
    HOCUS
    MAESTRO_D
    SAVVYHEAD
    SKINNER
}

enum ThreatType {
    WARLORD,
    GROTESQUE,
    BRUTE,
    AFFLICTION,
    LANDSCAPE,
    TERRAIN,
    VEHICLE,
}

enum LookType {
    GENDER,
    CLOTHES,
    FACE,
    EYES,
    BODY
}

enum UniqueType {
    ANGEL_KIT,
    CUSTOM_WEAPONS,
    BRAINER_GEAR,
    GANG,
    WEAPONS,
    HOLDING,
    FOLLOWERS,
    ESTABLISHMENT,
    WORKSPACE,
    SKINNER_GEAR
}

enum VehicleFrameType {
    BIKE,
    SMALL,
    MEDIUM,
    LARGE
}

enum BattleOptionType {
    SPEED,
    HANDLING,
    MASSIVE,
    ARMOR,
    WEAPON
}

enum VehicleType {
    BIKE,
    CAR,
    BATTLE
}

enum GangSize {
    SMALL,
    MEDIUM,
    LARGE
}

enum HoldingSize {
    SMALL,
    MEDIUM,
    LARGE
}

enum AllyType {
    FRIEND,
    LOVER,
    RIGHT_HAND,
    REPRESENTATIVE,
    GUARDIAN,
    CONFIDANTE
}

enum ScriptChangeType {
    REWIND,
    FAST_FORWARD,
    PAUSE,
    FRAME_BY_FRAME,
    INSTANT_REPLAY,
    RESUME
}

enum ThreatMapLocation {
    CENTER,
    CLOSER_NORTH,
    FARTHER_NORTH,
    CLOSER_UP,
    FARTHER_UP,
    CLOSER_EAST,
    FARTHER_EAST,
    CLOSER_OUT,
    FARTHER_OUT,
    CLOSER_SOUTH,
    FARTHER_SOUTH,
    CLOSER_DOWN,
    FARTHER_DOWN,
    CLOSER_WEST,
    FARTHER_WEST,
    CLOSER_IN,
    FARTHER_IN,
    NOT_ASSIGNED
}

# ---------------------------------------- STATIC GAME CONTENT TYPES -------------------------------------- #

type HoldConditions {
    id: ID!
    onTenPlus: Int
    onSevenToNine: Int
    onMiss: Int
}

type PlusOneForwardConditions {
    id: ID!
    isManualGrant: Boolean
    onTenPlus: Boolean
    onSevenToNine: Boolean
    onMiss: Boolean
}

type MoveAction {
    id: ID!
    actionType: MoveActionType
    rollType: RollType
    statToRollWith: StatType
    holdConditions: HoldConditions
    plusOneForwardConditions: PlusOneForwardConditions
}

type Move {
    id: ID!
    name: String!
    kind: MoveType!
    description: String!
    twelvePlusInstructions: String
    playbook: PlaybookType
    stat: StatType
    statModifier: StatModifier
    rollModifier: RollModifier
    moveAction: MoveAction
}

type Playbook {
    id: ID!
    playbookType: PlaybookType!
    barterInstructions: String!
    intro: String!
    introComment: String!
    playbookImageUrl: String!
}

type Name {
    id: ID!
    playbookType: PlaybookType
    name: String
}

type Look {
    id: ID!
    playbookType: PlaybookType
    category: LookType
    look: String
}

type StatsOption {
    id: ID!
    playbookType: PlaybookType
    COOL: Int
    HARD: Int
    HOT: Int
    SHARP: Int
    WEIRD: Int
}

type GearInstructions {
    id: ID!
    gearIntro: String
    youGetItems: [String]
    introduceChoice: String
    numberCanChoose: Int
    chooseableGear: [String]
    withMC: String
    startingBarter: Int
}

type ImprovementBlock {
    id: ID!
    playbookType: PlaybookType
    improvementInstructions: String
    improvementMoves: [Move]
    futureImprovementMoves: [Move]
}

type PlaybookCreator {
    id: ID!
    playbookType: PlaybookType
    defaultMoveCount: Int
    moveChoiceCount: Int
    defaultVehicleCount: Int
    improvementInstructions: String
    movesInstructions: String
    hxInstructions: String
    names: [Name]
    looks: [Look]
    statsOptions: [StatsOption]
    optionalMoves: [Move]
    defaultMoves: [Move]
    gearInstructions: GearInstructions
    playbookUniqueCreator: PlaybookUniqueCreator
    improvementBlock: ImprovementBlock
}

    ### ------------- Playbook Unique Creators ------------- ###

type PlaybookUniqueCreator {
    id: ID!
    type: UniqueType!
    angelKitCreator: AngelKitCreator
    brainerGearCreator: BrainerGearCreator
    customWeaponsCreator: CustomWeaponsCreator
    establishmentCreator: EstablishmentCreator
    followersCreator: FollowersCreator
    gangCreator: GangCreator
    holdingCreator: HoldingCreator
    skinnerGearCreator: SkinnerGearCreator
    weaponsCreator: WeaponsCreator
    workspaceCreator: WorkspaceCreator
}

type AngelKitCreator {
    id: ID!
    angelKitInstructions: String!
    startingStock: Int!
}

type BrainerGearCreator {
    id: ID!
    defaultItemCount: Int!
    gear: [String]!
}

type CustomWeaponsCreator {
    id: ID!
    firearmsTitle: String!
    firearmsBaseInstructions: String!
    firearmsBaseOptions: [TaggedItem]
    firearmsOptionsInstructions: String!
    firearmsOptionsOptions: [ItemCharacteristic]
    handTitle: String!
    handBaseInstructions: String!
    handBaseOptions: [TaggedItem]
    handOptionsInstructions: String!
    handOptionsOptions: [ItemCharacteristic]
}

type SecurityOption {
    id: ID!
    description: String!
    value: Int!
}

type EstablishmentCreator {
    id: ID!
    mainAttractionCount: Int!
    sideAttractionCount: Int!
    defaultSecuritiesCount: Int!
    attractions: [String]!
    atmospheres: [String]!
    atmosphereCount: [Int]!
    regularsNames: [String]!
    regularsQuestions: [String]!
    interestedPartyNames: [String]!
    interestedPartyQuestions: [String]!
    securityOptions: [SecurityOption]!
}

type FollowersOption {
    id: ID!
    description: String!
    newNumberOfFollowers: Int!
    surplusBarterChange: Int!
    fortuneChange: Int!
    surplusChange: String
    wantChange: [String]
}

type FollowersCreator {
    id: ID!
    instructions: String!
    defaultNumberOfFollowers: Int!
    defaultSurplusBarterCount: Int!
    defaultFortune: Int!
    defaultStrengthsCount: Int!
    defaultWeaknessesCount: Int!
    travelOptions: [String]!
    characterizationOptions: [String]!
    defaultWants: [String]!
    defaultSurplus: [String]!
    strengthOptions: [FollowersOption]!
    weaknessOptions: [FollowersOption]!
}

type GangOption {
    id: ID!
    description: String!
    modifier: String
    tag: String
}

type GangCreator {
    id: ID!
    intro: String!
    defaultSize: GangSize!
    defaultHarm: Int!
    defaultArmor: Int!
    strengthChoiceCount: Int!
    weaknessChoiceCount: Int!
    defaultTags: [String]!
    strengths: [GangOption]!
    weaknesses: [GangOption]!
}

type HoldingOption {
    id: ID!
    description: String!
    surplusChange: Int!
    wantChange: [String]
    newHoldingSize: HoldingSize
    gigChange: String
    newGangSize: GangSize
    gangTagChange: String
    gangHarmChange: Int!
    newVehicleCount: Int!
    newBattleVehicleCount: Int!
    newArmorBonus: Int!
}

type HoldingCreator {
    id: ID!
    defaultHoldingSize: HoldingSize!
    instructions: String!
    defaultSurplus: Int!
    defaultWant: String!
    defaultGigs: [String]!
    defaultArmorBonus: Int!
    defaultVehiclesCount: Int!
    defaultBattleVehicleCount: Int!
    defaultGangSize: GangSize!
    defaultGangHarm: Int!
    defaultGangArmor: Int!
    defaultGangTag: String!
    defaultStrengthsCount: Int!
    defaultWeaknessesCount: Int!
    strengthOptions: [HoldingOption]!
    weaknessOptions: [HoldingOption]!
}

type SkinnerGearItem {
    id: ID!
    item: String!
    note: String
}

type SkinnerGearCreator {
    id: ID!
    graciousWeaponCount: Int!
    luxeGearCount: Int!
    graciousWeaponChoices: [SkinnerGearItem]!
    luxeGearChoices: [SkinnerGearItem]!
}

type WeaponsCreator {
    id: ID!
    bfoGunOptionCount: Int!
    seriousGunOptionCount: Int!
    backupWeaponsOptionCount: Int!
    bigFuckOffGuns: [String]!
    seriousGuns: [String]!
    backupWeapons: [String]!
}

type WorkspaceCreator {
    id: ID!
    defaultItemsCount: Int!
    workspaceInstructions: String!
    projectInstructions: String!
    workspaceItems: [String]!
}

     ### ------------- Vehicle Creators ------------- ###

type VehicleFrame {
    id: ID!
    frameType: VehicleFrameType
    massive: Int
    examples: String
    battleOptionCount: Int
}

type VehicleBattleOption {
    id: ID!
    battleOptionType: BattleOptionType
    name: String
}

type CarCreator {
    id: ID!
    vehicleType: VehicleType
    introInstructions: String
    frames: [VehicleFrame]
    strengths: [String]
    looks: [String]
    weaknesses: [String]
    battleOptions: [VehicleBattleOption]
}

type BattleVehicleCreator {
    id: ID!
    vehicleType: VehicleType
    battleVehicleOptions: [VehicleBattleOption]
}

type BikeCreator {
    id: ID!
    vehicleType: VehicleType
    introInstructions: String
    frame: VehicleFrame
    strengths: [String]
    looks: [String]
    weaknesses: [String]
    battleOptions: [VehicleBattleOption]
}

type VehicleCreator {
    id: ID!
    bikeCreator: BikeCreator
    carCreator: CarCreator
    battleVehicleCreator: BattleVehicleCreator
}

     ### ------------- Threat Creator ------------- ###

type ThreatCreatorContent {
    id: ID!
    threatType: ThreatType!
    impulses: [String]!
    moves: [String]!
}

type ThreatCreator {
    id: ID!
    createThreatInstructions: String!
    essentialThreatInstructions: String!
    threatNames: [String]!
    threats: [ThreatCreatorContent]!
}

     ### ------------- MC CONTENT ------------- ###

type ContentItem {
    id: ID!
    title: String!
    content: String!
}

type TickerList {
    id: ID!
    title: String!
    items: [String]!
}

type FirstSessionContent {
    id: ID!
    intro: String!
    duringCharacterCreation: ContentItem!
    duringFirstSession: TickerList!
    threatMapInstructions: ContentItem!
    afterFirstSession: TickerList!
}

type McContent {
    id: ID!
    firstSessionContent: FirstSessionContent!
    decisionMaking: ContentItem!
    core: [TickerList]!
    harm: [ContentItem]!
    selected: [ContentItem]!
}

# ---------------------------------------- GAME & CHARACTER TYPES --------------------------------------- #

type User {
    id: ID!
    displayName: String
    email: String
    gameRoles: [GameRole]
}

type Game {
    id: ID!
    name: String!
    mc: User
    commsApp: String
    commsUrl: String
    hasFinishedPreGame: Boolean
    showFirstSession: Boolean
    threatMap: ThreatMap
    players: [User]
    gameRoles: [GameRole]
    invitees: [String]
    gameMessages: [GameMessage]
}

type ThreatMap {
    id: ID!
    gameId: String!
    wonderNotes: String
    threats: [Threat]!
}


type GameMessage {
    id: ID!
    gameId: String
    gameRoleId: String
    messageType: MessageType
    title: String
    sentOn: String
    stockSpent: Int
    currentStock: Int
    content: String
    roll1: Int
    roll2: Int
    rollModifier: Int
    usedPlusOneForward: Boolean
    rollResult: Int
    modifierStatName: StatType
    additionalModifierValue: Int
    additionalModifierName: String
    barterSpent: Int
    currentBarter: Int
    harmSuffered: Int
    currentHarm: Int
}

type Npc {
    id: ID
    name: String
    description: String
}

type Threat {
    id: ID
    name: String
    threatKind: ThreatType
    impulse: String
    description: String
    stakes: String
}

type CharacterStat {
    id: ID!
    stat: StatType
    value: Int
    isHighlighted: Boolean
}

type StatsBlock {
    id: ID!
    statsOptionId: String!
    stats: [CharacterStat]
}

type HxStat {
    id: ID!
    characterId: String!
    characterName: String!
    hxValue: Int!
}

type CharacterHarm {
    id: ID!
    value: Int!
    isStabilized: Boolean!
    hasComeBackHard: Boolean!
    hasComeBackWeird: Boolean!
    hasChangedPlaybook: Boolean!
    hasDied: Boolean!
}

type Hold {
    id: ID!
    moveName: String!
    moveDescription: String!
    rollResult: Int!
}

type Character {
    id: ID!
    name: String
    playbook: PlaybookType
    playbookUniques: PlaybookUniques
    hasCompletedCharacterCreation: Boolean
    hasPlusOneForward: Boolean
    barter: Int
    statsBlock: StatsBlock
    harm: CharacterHarm
    vehicleCount: Int
    battleVehicleCount: Int
    experience: Int!
    allowedImprovements: Int!
    allowedPlaybookMoves: Int!
    allowedOtherPlaybookMoves: Int!
    mapPosition: ThreatMapLocation!
    isDead: Boolean!
    isRetired: Boolean!
    mustChangePlaybook: Boolean!
    battleVehicles: [BattleVehicle]
    vehicles: [Vehicle]
    hxBlock: [HxStat]
    gear: [String]
    looks: [Look]
    characterMoves: [CharacterMove]
    improvementMoves: [CharacterMove]
    futureImprovementMoves: [CharacterMove]
    deathMoves: [CharacterMove]
    advancedBasicMoves: [String]!
    holds: [Hold]
}

type GameRole {
    id: ID!
    role: RoleType
    userId: String!
    gameId: String!
    gameName: String!
    npcs: [Npc]
    threats: [Threat]
    characters: [Character]
}

type CharacterMove {
    id: ID!
    isSelected: Boolean!
    name: String!
    kind: MoveType!
    description: String!
    twelvePlusInstructions: String
    playbook: PlaybookType!
    stat: StatType
    statModifier: StatModifier
    rollModifier: RollModifier
    moveAction: MoveAction
}

     ### ------------- Playbook Uniques ------------- ###

type PlaybookUniques {
    id: ID!
    type: UniqueType
    brainerGear: BrainerGear
    angelKit: AngelKit
    customWeapons: CustomWeapons
    gang: Gang
    weapons: Weapons
    holding: Holding
    followers: Followers
    skinnerGear: SkinnerGear
    establishment: Establishment
    workspace: Workspace
}

type AngelKit {
    id: ID!
    uniqueType: UniqueType!
    description: String!
    stock: Int!
    angelKitMoves: [Move]
    hasSupplier: Boolean!
    supplierText: String!
}

type BrainerGear {
    id:ID!
    uniqueType: UniqueType!
    allowedItemsCount: Int!
    brainerGear: [String]!
}

type CustomWeapons {
    id: ID!
    uniqueType: UniqueType!
    weapons: [String]!
}

type CastCrew {
    id: ID!
    name: String!
    description: String
}

type Establishment {
    id: ID!
    uniqueType: UniqueType!
    mainAttraction: String
    bestRegular: String
    worstRegular: String
    wantsInOnIt: String
    oweForIt: String
    wantsItGone: String
    securitiesCount: Int!
    sideAttractions: [String]!
    atmospheres: [String]!
    regulars: [String!]!
    interestedParties: [String!]!
    securityOptions: [SecurityOption]!
    castAndCrew: [CastCrew]!
}

type Followers {
    id: ID!
    uniqueType: UniqueType!
    description: String
    travelOption: String
    characterization: String
    followers: Int!
    surplusBarter: Int!
    fortune: Int!
    barter: Int
    strengthsCount: Int!
    weaknessesCount: Int!
    surplus: [String]!
    wants: [String]!
    selectedStrengths: [FollowersOption]!
    selectedWeaknesses: [FollowersOption]!
}

type Gang {
    id: ID!
    uniqueType: UniqueType!
    size: GangSize!
    harm: Int!
    armor: Int!
    allowedStrengths: Int!
    strengths: [GangOption]!
    weaknesses: [GangOption]!
    tags: [String]!
}

type Holding {
    id: ID!
    uniqueType: UniqueType!
    holdingSize: HoldingSize!
    gangSize: GangSize!
    souls: String!
    surplus: Int!
    barter: Int!
    gangHarm: Int!
    gangArmor: Int!
    gangDefenseArmorBonus: Int!
    wants: [String]!
    gigs: [String]!
    gangTags: [String]!
    strengthsCount: Int!
    weaknessesCount: Int!
    selectedStrengths: [HoldingOption]!
    selectedWeaknesses: [HoldingOption]!
}

type SkinnerGear {
    id: ID!
    uniqueType: UniqueType!
    graciousWeapon: SkinnerGearItem
    luxeGear: [SkinnerGearItem]!
}

type Weapons {
    id: ID!
    uniqueType: UniqueType!
    weapons: [String]!
}

type Project {
    id: ID!
    name: String!
    notes: String
}

type Workspace {
    id: ID!
    uniqueType: UniqueType!
    workspaceInstructions: String!
    projectInstructions: String!
    itemsCount: Int!
    workspaceItems: [String]!
    projects: [Project]
}

     ### ------------- Vehicles ------------- ###

type Vehicle {
    id: ID!
    vehicleType: VehicleType
    name: String
    vehicleFrame: VehicleFrame
    speed: Int
    handling: Int
    armor: Int
    massive: Int
    strengths: [String]
    weaknesses: [String]
    looks: [String]
    battleOptions: [VehicleBattleOption]
}

type BattleVehicle {
    id: ID!
    vehicleType: VehicleType
    name: String
    vehicleFrame: VehicleFrame
    speed: Int
    handling: Int
    armor: Int
    massive: Int
    strengths: [String]
    weaknesses: [String]
    looks: [String]
    weapons: [String]
    battleOptions: [VehicleBattleOption]
    battleVehicleOptions: [VehicleBattleOption]
}

# ----------------------------------------------- OTHER ---------------------------------------------- #

type TaggedItem {
    id: ID!
    description: String!
    tags: [String]
}

type ItemCharacteristic {
    id: ID!
    description: String!
    tag: String
}

type RollModifier {
    id: ID!
    movesToModify: [Move!]
    statToRollWith: StatType!
}

type StatModifier {
    id: ID!
    statToModify: StatType!
    modification: Int!
}

type SystemMessage {
    id: ID!
    successMessage: String
    errorMessage: String
}

# ---------------------------------------------- INPUTS --------------------------------------------- #

input LookInput {
    id: ID
    playbookType: PlaybookType
    category: LookType
    look: String
}

input HxInput {
    id: ID
    characterId: String!
    characterName: String!
    hxValue: Int!
}

input HarmInput {
    id: ID!
    value: Int!
    isStabilized: Boolean!
    hasComeBackHard: Boolean!
    hasComeBackWeird: Boolean!
    hasChangedPlaybook: Boolean!
    hasDied: Boolean!
}

input VehicleFrameInput {
    id: ID!
    frameType: VehicleFrameType
    massive: Int
    examples: String
    battleOptionCount: Int
}

input VehicleBattleOptionInput {
    id: ID!
    battleOptionType: BattleOptionType
    name: String
}

input VehicleInput {
    id: ID
    vehicleType: VehicleType
    name: String
    vehicleFrame: VehicleFrameInput
    speed: Int
    handling: Int
    armor: Int
    massive: Int
    strengths: [String]
    weaknesses: [String]
    looks: [String]
    battleOptions: [VehicleBattleOptionInput]
}

input BattleVehicleInput {
    id: ID
    vehicleType: VehicleType!
    name: String!
    vehicleFrame: VehicleFrameInput!
    speed: Int!
    handling: Int!
    armor: Int!
    massive: Int!
    strengths: [String]!
    weaknesses: [String]!
    looks: [String]!
    weapons: [String]!
    battleOptions: [VehicleBattleOptionInput]!
    battleVehicleOptions: [VehicleBattleOptionInput]!
}

input GangOptionInput {
    id: ID!
    description: String!
    modifier: String
    tag: String
}

input GangInput {
    id: ID
    size: GangSize!
    harm: Int!
    armor: Int!
    allowedStrengths: Int!
    strengths: [GangOptionInput]!
    weaknesses: [GangOptionInput]!
    tags: [String]!
}

input ThreatInput {
    id: ID
    name: String!
    threatKind: ThreatType!
    impulse: String!
    description: String
    stakes: String
}

input NpcInput {
    id: ID
    name: String!
    description: String
}

input HoldingOptionInput {
    id: ID!
    description: String!
    surplusChange: Int!
    wantChange: [String]
    newHoldingSize: HoldingSize
    gigChange: String
    newGangSize: GangSize
    gangTagChange: String
    gangHarmChange: Int!
    newVehicleCount: Int!
    newBattleVehicleCount: Int!
    newArmorBonus: Int!
}

input HoldingInput {
    id: ID
    holdingSize: HoldingSize!
    gangSize: GangSize!
    souls: String!
    surplus: Int!
    barter: Int!
    gangHarm: Int!
    gangArmor: Int!
    gangDefenseArmorBonus: Int!
    wants: [String]!
    gigs: [String]!
    gangTags: [String]!
    strengthsCount: Int!
    weaknessesCount: Int!
    selectedStrengths: [HoldingOptionInput]!
    selectedWeaknesses: [HoldingOptionInput]!
}

input FollowersOptionInput {
    id: ID!
    description: String!
    newNumberOfFollowers: Int!
    surplusBarterChange: Int!
    fortuneChange: Int!
    surplusChange: String
    wantChange: [String]
}

input FollowersInput {
    id: ID
    description: String!
    travelOption: String!
    characterization: String!
    followers: Int!
    fortune: Int!
    barter: Int!
    surplusBarter: Int!
    strengthsCount: Int!
    weaknessesCount: Int!
    surplus: [String]!
    wants: [String]!
    selectedStrengths: [FollowersOptionInput]!
    selectedWeaknesses: [FollowersOptionInput]!
}

input SkinnerGearItemInput {
    id: ID!
    item: String!
    note: String
}

input SkinnerGearInput {
    id: ID
    graciousWeapon: SkinnerGearItemInput!
    luxeGear: [SkinnerGearItemInput]!
}

input CastCrewInput {
    id: ID!
    name: String!
    description: String
}

input SecurityOptionInput {
    id: ID!
    description: String!
    value: Int!
}

input EstablishmentInput {
    id: ID
    mainAttraction: String!
    bestRegular: String!
    worstRegular: String!
    wantsInOnIt: String!
    oweForIt: String!
    wantsItGone: String!
    securitiesCount: Int!
    sideAttractions: [String]!
    atmospheres: [String]!
    regulars: [String]!
    interestedParties: [String]!
    securityOptions: [SecurityOptionInput]!
    castAndCrew: [CastCrewInput]!
}

input ProjectInput {
    id: ID
    name: String!
    notes: String
}

input WorkspaceInput {
    id: ID
    uniqueType: UniqueType!
    workspaceInstructions: String!
    projectInstructions: String!
    itemsCount: Int!
    workspaceItems: [String]!
    projects: [ProjectInput]
}

input HoldInput {
    id: ID!
    moveName: String!
    moveDescription: String!
    rollResult: Int!
}

# ---------------------------------------------- QUERIES --------------------------------------------- #

type Query {
    gameRolesByUserId(id: String!): [GameRole]
    game(gameId:String!): Game
    gameForPlayer(gameId:String!, userId:String!): Game
    gamesForInvitee(email: String!): [Game]
    allMoves: [Move]
    otherPlaybookMoves(playbookType: PlaybookType!): [Move]
    playbooks: [Playbook]
    playbook(playbookType: PlaybookType!): Playbook
    playbookCreator(playbookType: PlaybookType!): PlaybookCreator
    vehicleCreator: VehicleCreator
    threatCreator: ThreatCreator
    mcContent: McContent
    deathMoves: [Move!]!
}

# --------------------------------------------- MUTATIONS -------------------------------------------- #

type Mutation {
    # Game-related
    createGame(userId: String!,
        displayName: String!,
        email: String!
        name: String!): Game
    setGameName(gameId: String!, name: String!): Game
    addInvitee(gameId: String!, email: String!): Game
    removeInvitee(gameId: String!, email: String!): Game
    removePlayer(gameId: String!, playerId: String!): Game
    addCommsApp(gameId: String!, app: String!): Game
    addCommsUrl(gameId: String!, url: String!): Game
    deleteGame(gameId: String!): Game
    addUserToGame(gameId: String!,
        userId: String!,
        displayName: String!,
        email: String!): Game

    # MC stuff
    finishPreGame(gameId: String!): Game
    closeFirstSession(gameId: String!): Game
    addThreat(gameRoleId: String!, threat: ThreatInput): GameRole
    addNpc(gameRoleId: String!, npc: NpcInput): GameRole

    # Creating and editing characters
    createCharacter(gameRoleId: String!): Character
    setCharacterPlaybook(gameRoleId: String!,
        characterId: String!,
        playbookType: PlaybookType!): Character
    changePlaybook(
        gameRoleId: String!, characterId: String!, playbookType: PlaybookType!
    ): Character!
    setCharacterName(gameRoleId: String!,
        characterId: String!,
        name: String!): Character
    setCharacterLook(gameRoleId: String!,
        characterId: String!,
        look: LookInput! ): Character
    setCharacterStats(gameRoleId: String!,
        characterId: String!,
        statsOptionId: String! ): Character
    setCharacterGear(gameRoleId: String!,
        characterId: String!,
        gear: [String]! ): Character
    setCharacterMoves(gameRoleId: String!,
        characterId: String!,
        moveNames: [String]!): Character
    setCharacterHx(gameRoleId: String!,
        characterId: String!,
        hxStats: [HxInput]!): Character
    finishCharacterCreation(gameRoleId: String!,
        characterId: String!): Character

    ### Setting PlayBookUniques
    setAngelKit(gameRoleId: String!,
        characterId: String!,
        stock: Int!,
        hasSupplier: Boolean! ): Character
    setBrainerGear(gameRoleId: String!,
        characterId: String!,
        brainerGear: [String]! ): Character
    setCustomWeapons(gameRoleId: String!,
        characterId: String!,
        weapons: [String]! ): Character
    setEstablishment(gameRoleId: String!,
        characterId: String!,
        establishment: EstablishmentInput! ): Character
    setFollowers(gameRoleId: String!,
        characterId: String!,
        followers: FollowersInput!
    ): Character
    setGang(gameRoleId: String!,
        characterId: String!,
        gang: GangInput! ): Character
    setHolding(gameRoleId: String!,
        characterId: String!,
        holding: HoldingInput!,
        vehicleCount: Int!,
        battleVehicleCount: Int!
    ): Character
    setSkinnerGear(gameRoleId: String!,
        characterId: String!,
        skinnerGear: SkinnerGearInput! ): Character
    setWeapons(gameRoleId: String!,
        characterId: String!,
        weapons: [String]! ): Character
    setWorkspace(gameRoleId: String!,
        characterId: String!,
        workspace: WorkspaceInput! ): Character
    resolveEstablishmentInterest(gameRoleId: String!,
        characterId: String!,
        oweForIt: String,
        wantsInOnIt: String,
        wantsItGone: String ): Character

    ### Setting Vehicles
    setVehicleCount(gameRoleId: String!,
        characterId: String!,
        vehicleCount: Int! ): Character
    setBattleVehicleCount(gameRoleId: String!,
        characterId: String!,
        battleVehicleCount: Int! ): Character
    setVehicle(gameRoleId: String!,
        characterId: String!,
        vehicleInput: VehicleInput! ): Character
    setBattleVehicle(gameRoleId: String!,
        characterId: String!,
        battleVehicle: BattleVehicleInput! ): Character

    ### Adjusting from PlaybookPanel
    adjustCharacterHx(gameRoleId: String!,
        characterId: String!, hxStat: HxInput!): Character
    setCharacterHarm(gameRoleId: String!,
        characterId: String!, harm: HarmInput!): Character
    toggleStatHighlight(gameRoleId: String!,
        characterId: String!, stat: StatType): Character
    setCharacterBarter(gameRoleId: String!,
        characterId: String!,
        amount: Int! ): Character
    setHoldingBarter(gameRoleId: String!,
        characterId: String!,
        amount: Int! ): Character
    updateFollowers(gameRoleId: String!,
        characterId: String!,
        barter: Int!,
        followers: Int!,
        description: String!
    ): Character
    addProject(gameRoleId: String!,
        characterId: String!,
        project: ProjectInput
    ): Character
    removeProject(gameRoleId: String!,
        characterId: String!,
        project: ProjectInput
    ): Character
    spendExperience(gameRoleId: String!,
        characterId: String!
    ): Character
    adjustImprovements(gameRoleId: String!,
        characterId: String!,
        improvementIds: [String]!,
        futureImprovementIds: [String]
    ): Character
    setDeathMoves(
        gameRoleId: String!, characterId: String!, moveNames: [String]!
    ): Character!


    #    Move categories
    performPrintMove(gameId: String!,
        gameRoleId: String!,
        characterId: String!,
        moveId: String!,
        isGangMove: Boolean!
    ): Game
    performBarterMove(gameId: String!, gameRoleId: String!, characterId: String!, moveId: String!, barter: Int!): Game
    performStockMove(gameId: String!, gameRoleId: String!, characterId: String!, moveName: String!, stockSpent: Int!): Game

    #    Roll move categories
    performStatRollMove(gameId: String!,
        gameRoleId: String!,
        characterId: String!,
        moveId: String!,
        isGangMove: Boolean!): Game
    performSpeedRollMove(gameId: String!,
        gameRoleId: String!,
        characterId: String!,
        moveId: String!,
        modifier: Int!): Game # Modifier can be speed difference, relative speed, or handling

    #    Specific moves
    performWealthMove(gameId: String!,
        gameRoleId: String!,
        characterId: String!): Game
    performFortunesMove(gameId: String!,
        gameRoleId: String!,
        characterId: String!): Game
    performHelpOrInterfereMove(gameId: String!, gameRoleId: String!, characterId: String!, moveId: String!, targetId: String!): Game
    performMakeWantKnownMove(gameId: String!, gameRoleId: String!, characterId: String!, moveId: String!, barter: Int!): Game
    performSufferHarmMove(gameId: String!, gameRoleId: String!, characterId: String!, moveId: String!, harm: Int!): Game
    performSufferVHarmMove(gameId: String!, gameRoleId: String!, characterId: String!, vHarm: Int!): Game
    performInflictHarmMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!,
        harm: Int!): Game
    performHealHarmMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!,
        harm: Int!): Game
    performAngelSpecialMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!): Game
    performChopperSpecialMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!,
        hxChange: Int!): Game
    performGunluggerSpecialMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!,
        addPlus1Forward: Boolean!): Game
    performHocusSpecialMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!): Game
    performSkinnerSpecialMove(gameId: String!,
        gameRoleId: String!,
        otherGameroleId: String!,
        characterId: String!,
        otherCharacterId: String!,
        plus1ForUser: Boolean!,
        plus1ForOther: Boolean!,): Game
    performStabilizeAndHealMove(gameId: String!, gameRoleId: String!, characterId: String!, stockSpent: Int!): Game
    performJustGiveMotivationMove(gameId: String!, gameRoleId: String!, characterId: String!, targetId: String): Game

    # Other
    spendHold(gameId: String!, gameRoleId: String!, characterId: String!, hold: HoldInput!): Game
    removeHold(gameRoleId: String!, characterId: String!, hold: HoldInput!): Character
    changeScript(gameId: String!, scriptChangeType: ScriptChangeType!, comment: String): Game
    resetDb: SystemMessage
}

# ------------------------------------------- SUBSCRIPTIONS ------------------------------------------ #

